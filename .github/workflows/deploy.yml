name: CI/CD to Amazon EKS

on:
  push:
    branches: [ "master" ]

env:
  AWS_REGION: eu-west-3
  CLUSTER_NAME: demo
  ECR_REGISTRY: 695353648045.dkr.ecr.eu-west-3.amazonaws.com
  ECR_REPOSITORY: smarttrack

jobs:
  build:
    name: Build JAR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Maven
        run: mvn clean package -DskipTests
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/smarttrack-0.0.1-SNAPSHOT.jar

  docker:
    name: Build & Push Docker
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target/
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin $ECR_REGISTRY
      - name: Build Docker image
        run: docker buildx build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} .
      - name: Push Docker image
        run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
      - name: Deploy to EKS
        run: |
          echo "üëâ Mise √† jour du d√©ploiement avec la nouvelle image"
          kubectl set image deployment/smarttrack-deployment smarttrack-container=$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          
          echo "üëâ Attente du rollout (max 600s)"
          if ! kubectl rollout status deployment/smarttrack-deployment --timeout=600s; then
            echo "‚ùå Rollout bloqu√©, affichage debug :"
            kubectl get pods -l app=smarttrack -o wide
            kubectl describe deployment smarttrack-deployment
            kubectl describe pod $(kubectl get pod -l app=smarttrack -o jsonpath="{.items[0].metadata.name}")
            kubectl logs $(kubectl get pod -l app=smarttrack -o jsonpath="{.items[0].metadata.name}") || true
            exit 1
          fi
      - name: Clean old images
        run: |
          CURRENT=$(kubectl get deployment smarttrack-deployment -o=jsonpath='{.spec.template.spec.containers[0].image}')
          ALL=$(aws ecr list-images --repository-name smarttrack --region eu-west-3 --query 'imageIds[*].imageTag' --output text)
          for TAG in $ALL; do
            if [[ "$CURRENT" != *"$TAG" ]]; then
              echo "Deleting $TAG"
              aws ecr batch-delete-image --repository-name smarttrack --region eu-west-3 --image-ids imageTag=$TAG || true
            fi
          done